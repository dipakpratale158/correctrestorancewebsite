import { useContext } from "react";

import Modal from "../UI/Modal";
import CartItem from "./CartItem";
import classes from "./Cart.module.css";
import CartContext from "../../store/cart-context";

const Cart = (props) => {
  const cartCtx = useContext(CartContext);

  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;
  const hasItems = cartCtx.items.length > 0;

  const cartItemRemoveHandler = (id) => {
    cartCtx.removeItem(id);
  };

  const cartItemAddHandler = (item) => {
    cartCtx.addItem({ ...item, amount: 1 });
  };

  const cartItems = (
    <ul className={classes["cart-items"]}>
      {cartCtx.items.map((item) => (
        <CartItem
          key={item.id}
          name={item.name}
          amount={item.amount}
          price={item.price}
          onRemove={cartItemRemoveHandler.bind(null, item.id)}
          onAdd={cartItemAddHandler.bind(null, item)}
        />
      ))}
    </ul>
  );

  return (
    <Modal onClose={props.onClose}>
      {cartItems}
      <div className={classes.total}>
        <span>Total Amount</span>
        <span>{totalAmount}</span>
      </div>
      <div className={classes.actions}>
        <button className={classes["button--alt"]} onClick={props.onClose}>
          Close
        </button>
        {hasItems && <button className={classes.button}>Order</button>}
      </div>
    </Modal>
  );
};

export default Cart;

// The first thing we do is import the necessary dependencies:

// javascript
// Copy code
// import { useContext } from 'react';
// import Modal from '../UI/Modal';
// import CartItem from './CartItem';
// import classes from './Cart.module.css';
// import CartContext from '../../store/cart-context';
// useContext is a hook that allows you to consume a context in your functional components.
// Modal is a component that shows a modal or a dialog box.
// CartItem is a component that renders the items in the cart.
// classes is an object that contains CSS classes for the Cart component.
// CartContext is the context we created earlier to manage the cart.
// Next, we create a Cart component which receives a props object:

// javascript
// Copy code
// const Cart = (props) => {
//   const cartCtx = useContext(CartContext);
//   // ...
// }
// Within this component, we use the useContext hook to get the cartCtx object which contains the state and functions of the CartContext.

// We also define two variables totalAmount and hasItems that will be used later to render the total amount of the order and the "Order" button respectively.

// javascript
// Copy code
//   const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;
//   const hasItems = cartCtx.items.length > 0;
// The cartItemRemoveHandler and cartItemAddHandler functions are used to remove and add items respectively:

// javascript
// Copy code
//   const cartItemRemoveHandler = (id) => {
//     cartCtx.removeItem(id);
//   };

//   const cartItemAddHandler = (item) => {
//     cartCtx.addItem({ ...item, amount: 1 });
//   };
// These functions are called when the user clicks the remove or add buttons in the CartItem component.

// We then create a cartItems variable that contains a list of CartItem components. This list is generated by mapping the items array from the cartCtx object.

// javascript
// Copy code
//   const cartItems = (
//     <ul className={classes['cart-items']}>
//       {cartCtx.items.map((item) => (
//         <CartItem
//           key={item.id}
//           name={item.name}
//           amount={item.amount}
//           price={item.price}
//           onRemove={cartItemRemoveHandler.bind(null, item.id)}
//           onAdd={cartItemAddHandler.bind(null, item)}
//         />
//       ))}
//     </ul>
//   );
// Each CartItem component receives the following props:

// key: A unique identifier for the component.
// name: The name of the item.
// amount: The quantity of the item.
// price: The price of the item.
// onRemove: A function to remove an item.
// onAdd: A function to add an item.
// Finally, we return a Modal component that contains the cartItems list, the total amount, and the "Close" and "Order" buttons.

// javascript
// Copy code
//   return (
//     <Modal onClose={props.onClose}>
//       {cartItems}
//       <div className={classes.total}>
//         <span>Total Amount</span>
//         <span>{totalAmount}</span>
//       </div>
//       <div className={classes.actions}>
//         <button className={classes['button--alt']} onClick={props.onClose}>
//           Close
//         </button>
//         {hasItems && <button className={classes.button}>Order</button>}
//       </div>
//     </Modal>
//   );
// The Modal component receives the onClose prop which is a function to close the modal when the "Close" button is clicked
